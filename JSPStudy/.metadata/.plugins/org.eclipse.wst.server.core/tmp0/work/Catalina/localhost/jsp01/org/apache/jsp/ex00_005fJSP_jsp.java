/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-03-12 17:05:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;

public final class ex00_005fJSP_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

public int add(int a, int b) {
		return a + b;
	}
int num3 = 79;
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(1);
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!-- 4. 지시자 : 페이지의 필요한 설정을 지정할 수있는 영역 ->import 사용  -->\r\n");
      out.write("<!-- 지시자 : ArrayList를 스크립트릿에 적으면 자동으로 지시해준다-->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<!-- 1. 스크립트릿 : jsp 내부에서 java 언어를 로직으로 사용하기 위한 영역! -> 변수 선언과 연산등의 로직 구현 -->\r\n");
      out.write("	<!-- 1. 스크립트릿 : 자바언어를 로직하거나 처리하는 공간이지 변수를 불러오거나 매서드를 호출하는 공간은 아니다  -->\r\n");
      out.write("	");

	int num1 = 25;
	int num2 = 5;
	int sum = num1 + num2;
	ArrayList<String> array = new ArrayList<String>();
		
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<!-- 2. 표현식 : java 변수자체 혹은 연산된 로직등 혹은 매서드를 화면에 출력하기 위하여 사용되는 영역! -->\r\n");
      out.write("	<!-- 반드시 \"=\"이라는 식을 사용해야 변수가 화면에 출력된다  -->\r\n");
      out.write("	<!-- 바디태그안이므로 자바코드를 쓰거나 변수를 사용시에는 태그%기호를 쓰는 것이다 -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	");
      out.print(num1);
      out.write("<br>\r\n");
      out.write("	");
      out.print(num2 * 10);
      out.write("<br>\r\n");
      out.write("	");
      out.print(add(7, 7));
      out.write("<br>\r\n");
      out.write("	");
      out.print(num3);
      out.write("<br>\r\n");
      out.write("\r\n");
      out.write("	<!--3.선언문: 매소드를 선언하기 위해서 사용하는 영역 \r\n");
      out.write("	->전역매서드로 만들어진다!! **변수선언도 가능->전역변수화\r\n");
      out.write("	-->\r\n");
      out.write("	<!--선언문은 java로 변환시 해당 내용들을 전역으로 쓰도록 가장 맨위에 배치한다! \r\n");
      out.write("	     하지만 여기서는 아무곳이든 !만 붙이면 그 자체가 전역이다-->\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.print(add(3, 7));
      out.write("\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("<!-- C:\\Users\\SMHRD\\Desktop\\JSPStudy\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\\work\\Catalina\\localhost\\jsp01\\org\\apache\\jsp  -->\r\n");
      out.write("<!--.jsp 파일은 .japa 와 .class 파일 확장자로 구성됨 -> html태그안에서 java코딩을 하는 것으로 자바파일을 class로 컴파일 한 후 html코드로 변환한다 -->\r\n");
      out.write("<!--서버가 jsp파일 요청을 받으면 서버는 웹컨테이너로 요청을 옮겨 컨테이너 안에서 위의 과정를 거치고 html파일로 최종 변환 ->동기 및 비동기식의 동적환경  -->\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
