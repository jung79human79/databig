/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-03-15 14:54:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.PrintWriter;

public final class Ex04_005flogin_005fsuccess_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(1);
    _jspx_imports_classes.add("java.io.PrintWriter");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body align=\"center\">\r\n");
      out.write("	<fieldset>\r\n");
      out.write("		<!--  로그인 성공시 보이는 화면 로그아웃을 하면 다시 로그인 페이지로 이동-->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		<!-- 로그인.html에서 설정한 action값은 로그인jsp에만 태그의 속성을 전달한다  -->\r\n");
      out.write("		<!-- 다른 페이지 즉 성공페이지에 가면 태그의 속성을 쓸수 없다 페이지간 공유가 안된다.  -->\r\n");
      out.write("\r\n");
      out.write("		<!-- 페이지 요청신호는 한 번주면 끝난다 다른 페이지로 공유 안된다 -> 다시 로그인 페이지로 가서 가져와야 id값을 성공페이지에서 쓸수 있는데  -->\r\n");
      out.write("		<!-- 그 방식 보다는 로그인.jsp에서 get방식의 query string 문법(주소 키=밸류)으로 성공페이지로 전달하는 코드를 적어주면 처음 html에서의 값들을 주소형태로 가져와서 요청할수 있다  -->\r\n");
      out.write("		<!-- 이 요청을 받기 위해  request.getParameter함수를 써야한다 -->\r\n");
      out.write("\r\n");
      out.write("		");

		// 로그인.jsp에서 요청하는 변수를 가져와서 변수에 저장해야 이 변수를 표현할 수 있다 
		// get방식의 쿼리스트링 문법 사용시 데이터 가져오기
		String id = request.getParameter("data");

		// forward 방식으로 넘어온 데이터 께내오기 --> 요청에 요청이 연속됨 -> 서버에서 자체적으로 요청과 응답를 처리해서 최종적으로 하나만 돌려준다
		// 결국 데이터 공유법이다 --> 퀴리문은 한번씩 간다 공유 안된다?
		// getAttribute의 반환 타입은 오브젝트 이므로 변수에 저장시 형변환
		// 자바에서 클래스 최상위자 오브젝트를 문자열로 넣으면 너무 크니 강제형변환 해야함
		String id2 = (String) request.getAttribute("id");
		if (id == null) {
			out.print("<h1>" + id2 + "님 환영합니다</h1>");
		} else if (id2 == null) {
			out.print("<h1>" + id + "님 환영합니다</h1>");
		}
		
      out.write("\r\n");
      out.write("		<h1>");
      out.print("<h1>" + id + "</h1>");
      out.write("님 환영합니다\r\n");
      out.write("		</h1>\r\n");
      out.write("		<h1>");
      out.print(id2 + "님 환영합니다");
      out.write("님 환영합니다\r\n");
      out.write("		</h1>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		<!--  프로젝트 명이 같은 것이 있으므로 확장자까지 적는다 -->\r\n");
      out.write("		<a href=\"Ex04Login.html\">로그아웃</a>\r\n");
      out.write("\r\n");
      out.write("	</fieldset>\r\n");
      out.write("	<!-- Ex04Login.jsp에서 sendRedirect()으로 전송시 url-->\r\n");
      out.write("	<!--  http://localhost:8080/jsp02/Ex04_login_success.jsp?data=wjdeown -->\r\n");
      out.write("	<!-- Ex04Login.jsp에서 getRequestDispatcher()으로 전송시 url -->\r\n");
      out.write("	<!--  http://localhost:8080/jsp02/Ex04Login.jsp -->\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
